
The dated diary is actually just a tuple of a file type and a program that interprets that file type.  (Might be extended to a file type as an archive, to store images with.)

The goal of the diary is to be able to "send messages" to a diary, as though one were chatting on discord.  I record a lot of my life to my discord spam channel, because I love how simple it is to commit a sentence or clause one after the other, as though imitating real speech.

The file type is a "File", which consists of a list of "Messages" in chronological order.  These messages can be edited; every time you edit and commit the change to the message, you put a "Commit" in its commit history.  When reading a File, you are shown the most recent Commit to any message, but you can also see prior commits to messages for the sake of history.  It's basically any chat channel with a solitary user, except more than just the last edited message, you can see the entire commit history.
    : if we only recorded the latest edit and an edit status, representation would be much easier...  each time unit can just be on a line...  maybe I should do that?...  maybe i'll just do thatmy
    : well, we can still do the vec of commits. the file is a list of messages.  each message is delineated from the next with a newline.  each message is a list of commits.  these commits are on their own invidual lines.


-Features

: unicode support
: pictures, eventually
    : the text file that contains the messages should include links to photos stored somewhere
    : the photos should be stored in a nearby folder
    : the entire file might even be saved as an archive - a package of text file with messages and a folder of images

: word wrapping and cursor placement
    : really fkin hard... to implement manually, that is.  but we can use a library to wrap text, and the thing already calculates cursor placement... or does it?


=Timeline

: implement App, a simple editing UI, and get it to work in one execution
: implement word wrapping
    : done with crate textwrap
: implement dynamic UI changes
: implement keyboard cursor and UI state
    : make messages selectable, so you can see their writing date
        : need to make messages into a List instead of a wrapped Paragraph like it is rn
: implement UI constant update
    : need to close ui thread when logic thread is finished
    : https://stackoverflow.com/questions/26199926/how-to-terminate-or-suspend-a-rust-thread-from-another-thread
    : turns out I only need to use non-blocking poll instead of read LMAO
: implement scrolling and view automatically updating
    : works right out the bat with layout::Corner.  PHEW!
: implement EDITING of MESSAGES
: implement file type and file saving
    : use a popup window to type file name to write to?
    : GOT IT TO WORK! also, editing previous messages works like a charm
    : got default file saving to work as well
: implement start screen and MRU list
    : mru is saved in config file using confy
: implemented basic message bar
: implement more sophisticated saving mode
: implement file saving popup window, and writing file to a name/path
    : if they give a simple file name, just write it in current directory; if they give a path, write it there; rust handles that
: create a gap buffer library
    : just simple right now

: implement proper editing
    : gapbuffer
    : cursor
    : scroll
    : selecting text
        : select text, mass delete the text
: expand gapbuffer to encompass popular actions
: implement clipboard
: implement message bar wrap and dynamic sizing
: implement message hold popup window 
    : (which triggers if option is not set to show time next to message)
: implement time conversion from Utc to Local, and showing time in message view option
: implement configuration
    : option to open last session or always do start screen
    : option to autosave on commit; on by default
    : use a config file or have options?  probably a config file like vim
: implement special key combinations like C-BS to backspace a word
: implement multiple files open
: implement message commit history screen
: implement mouse
: implement file date created (first commit of first message timestamp)

: make file type into an archive like with .osu
: scrollbar?
: cache input bar heights and string widths and stuff?
: option to show/hide dates of messages in message view?
: settings screen?
: probably should write program version to files
: far future: sixel and image rendering
    : when user posts an image, save it a la VimPaste to the file's type
    : https://github.com/fdehau/tui-rs/issues/143
    : don't necessarily have to display inline - could make a corner, like the 4chan image hover does, or maybe popup window?

=Business logic and app state

-appdata, config, recording information

: will need to save a list of recently opened files.
: will need to save a config file.

-ram and open files
: keep open files in memory
    : if file is too large, still open a tab, but don't put in memory
: allow you to switch between open files in tabs

-open file protocol
: write file path to mru list
: if mru list is more than 30 lines, pare it down
: everytime a file is opened, update the mru list

=TUI description

-Start screen

Only shows if specific file wasn't opened already.
Should show a list of recently opened files that you can select from and open.
    : Make sure to implement a Stateful List so that you can highlight items the cursor is over.

Maybe also show some commands, like New..., Open..., Close... etc.
But give them cute names.  like:
Start a chat...
Resume a chat...
Log off...


-Editor

Two blocks, one large on top which contains the file itself which is a list of sentences, one thin on the bottom which is simply the editing line.  Want to make it dynamically resize as you continue to type, but only to some percentage of the screen; from there, the view of the text simply scrolls.

-Input

Should just be a regular paragraph inside a block.  To display text, you should track state internally in the app and update it as the program continues.  On each frame it should read the string from the app state and then display that accordingly.
Need to update the size of the block as the paragraph grows, but also need to constrain the size of the block to some percentage of the screen.  Also, need for the input to be a minimum size.
needs a Wrap widget too.

To prevent the input from growing beyond 20% of the string, set top part's Constraint to 80%.

Want the input bar height to be at most 20% of the frame's height.
Want the input bar height to be at least 3 (1 row for the text, 2 for the top and bottom borders).
Want the input bar height to start at 3.

Set the cursor to the end, calculate it somehow.

Change the bordertype of the input box when editing a previous commit.
Make it normal otherwise.

So the way app design works is that you have AppState for a Stateful application, and then you have the UI, which may have its own state, and then you do every 

# Write a function that, given a rectangle and a string, decides how to fit and wrap the string.
